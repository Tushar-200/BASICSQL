BASIC TERMINOLOGIES

Database 
Database is a collection of data in a format that can be easily accessed 
(Digital) 
A software applications used to manage our database is called DBMS (Database 
Management System) 

Types Of Databases
Relational - Data stored in tables e.g. MYSQL,PostgreSQL,Microsoft SQL server
Non Relational - Data not stored in tables e.g. MongoDB, NOSQL

SQL (Structured Query Language)
SQL is a programming language used to interact with relational databases 
It is used to perform CURD Operaations
CREATE
UPDATE
READ
DELETE

SEQUEL - Structured English Query Language

Types of SQL
DDL (Data Definition Language)- create,alter,update,truncate and drop
DQL (Data Query Language)- Select
DML (Data Manipulation Language) - grant and revoke permissions to users
TCL (Transaction Control Language) - start transaction,commit,rollback

Entity Relationship Model
Entity - Anything which has physical existence 
Attribute Characteristics of Entity
Student (Roll no, Age, Address )
Relationship - Cardinality


Types of Attribute 
1. Single vs multivalued Attribute
multivalued Having 2 or more than 2 values  
single Having 1 unique value
example 
Single - Registration_no of student_name
multivalued - student_name (e.g. bob,max,bob)

2. Simple vs Composite
Simple which does not broken further
Composite which is broken further 
example
Composite - student_name broken further into first_name, Second_name, Last_name
Simple - mobile number

3. Stored vs Derived
stored - Having fixed values
derived - whose value calculated from other Attributes
example
derived age Attribute is derived from dob Attribute

4. Key vs NonKey Attributes
Key - which is used to uniquely identify rows
NonKey - which may have unique values or not

5. Required vs Optional Attributes
Required which is compulsary 
optional which is not compulsary we can skip It

6. Complex Attribute
Composite plus multivalued 

Database
--create
syntax- Create Database database_name;

-- To access the database
syntax- USE database_name;

--drop
syntax- Drop database database_name;

--read only
syntax- ALTER DATABASE database_name READ ONLY = 1;
-- we cannot make any modification to it but still access the data within

-- To disable read only Mode
syntax- ALTER DATABASE database_name READ ONLY = 0;

tables
--Create
syntax -
CREATE TABLE table_name (
    Column1, datatype,
    Column2, datatype,
    Column3, datatype,
    ...............
);

-- Select
syntax - Select * from table_name;

-- Rename
syntax - RENAME TABLE old_table to new_table;

-- Drop
syntax - DROP TABLE table_name;

-- ALTER - TO ADD Column
syntax - 
ALTER TABLE table_name
ADD Column_name datatype;

-- ALTER - TO RENAME Column
syntax -
ALTER TABLE table_name
RENAME COLUMN old_table to new_table;

-- ALTER - To modify Column_name (Change the datatype)
syntax -
ALTER TABLE table_name
modify Column_name datatype

-- ALTER - To Drop a Column
syntax -
ALTER TABLE table_name
DROP COLUMN Column_name;

-- ALTER - To Change the position of Column
syntax -
ALTER TABLE table_name
modify Column_name datatype
AFTER POSITION_COLUMNAME ;


-- INSERT
-- TO Multiple rows
syntax -
INSERT INTO table_name
VALUES(value1,'value2','value3'),
       (,,),
       (,,),
       (,,);

-- To add single row
synatx - 
INSERT INTO table_name(collumn1,column2,column3,column4)
VALUES('value1','value2','value3','value4');

-- SELECT 
-- To select all columns
synatx -
select * from table_name;

-- To select specific rows
syntax -
select column_names form table_name;

-- To select all distinct values
syntax -
SELECT DISTINCT column_names from table_name;

-- WHERE -- To fillter all the records
syntax -
SELECT * FROM table_name
WHERE condition;

synatx- 
SELECT * FROM table_name
WHERE Column_name = 'value';


UPDATE AND DELETE
syntax-
UPDATE table_name
SET COLUMN = VALUE
WHERE CONDITION ;

-- CONSTANT VALUE
synatx -
UPDATE table_name
SET COLUMN = VALUE;

-- To delete a row from a table 
syntax -
DELETE * FROM table_name;

syntax -
DELETE FROM table_name
WHERE CONDITION;

syntax -
SET AUTOCOMMIT = OFF ;
-- with this query our transaction will not save automatically
-- It creates a save point 

-- To undo the statements
rollback;

-- TO execute the statements permanently
commit;

DATE AND TIME 
current_date()
current_time()
Now()
Example 
INSERT INTO table_name
VALUES(current_date(),current_time(),Now())

DROP 
syntax -
DROP TABLE table_name; -- TO DROP THE TABLE
DROP DATABASE database_name; -- TO DROP THE DATABASE 

UNIQUE 
-- used to avoid duplicate values 
Example
CREATE TABLE product(
    product_id INT,
    product_name Varchar(25),
    price DECIMAL(4,2)
);

ALTER TABLE product
ADD CONSTRAINT
UNIQUE(product_name);

-- The unique constraint ensures that all values in a column are different
Both the UNIQUE and PRIMARY KEY constraint provide a guarantee for uniqueness 
for a column or set of columns
A PRIMARY KEY constraint automatically has a UNIQUE constraint
However, you can have many unique constraint as per table, but only one 
PRIMARY KEY

-- Drop a Unique constraint
ALTER  TABLE table_name
DROP INDEX Column_name;

NOT NULL
CREATE TABLE table_name(
    Column1 datatype,
    Column2 datatype,
    Column3 datatype NOT NULL,
    ................
);

ALTER TABLE products
MODIFY COLUMN price Decimal(4,2) NOT NULL;


INSERT INTO table_name
values(104,'cookie',NULL);
This query will return Error if third column of this table is set to be 
NOT NULL
NOT NULL Constraint enforces a column to not accept NULL VALUES 

CHECK
The Check Constraint is used to limit the value range that can be placed 
in a column
SQL CHECK ON CREATE TABLE
CREATE TABLE table_name(
    emp_id INT NOT NULL,
    first_name varchar(25),
    Last_name varchar(25),
    hourly_pay DECIMAL(4,2),
    constraint chk_hourly_pay CHECK(hourly_pay >= 10)
);
-- constraint constraint_name CHECK(condition)
                                OR 
CREATE TABLE Employees(
    emp_id INT NOT NULL,
    first_name varchar(25),
    Last_name varchar(25),
    hourly_pay Decimal(4,2) CHECK(hourly_pay >= 10)
);

-- SQL CHECK ON ALTER TABLE
ALTER TABLE table_name
ADD CHECK(hourly_pay >= 10);

ALTER TABLE table_name
ADD CONSTRAINT CHK_EMP CHECK(hourly_pay >= 10);

DROP A CONSTRAINT
ALTER TABLE Employees
DROP CHECK chk_hourly_pay;

ALTER TABLE Employees
DROP CONSTRAINT chk_hourly_pay;

DEFAULT
Example
SELECT * FROM produts;

INSERT INTO products 
VALUES(104,'Straw',0.00),
      (105,'Napkin',0.00),
      (106,'Fork',0.00);

--INSTEAD 
CREATE TABLE products(
    product_id INT,
    product_name Varchar(25),
    price Decimal(4,2) DEFAULT 0
);

ALTER TABLE products 
ALTER price SET DEFAULT 0;

INSERT INTO products(product_id,product_name)
VALUES(104,'Straw'),
      (105,'napkin'),
      (106,'fork'),
      (107,'spoon');


--ANOTHER Example
CREATE TABLE transctions(
    transaction_id INT, 
    Amount DECIMAL(5,2),
    transaction_date DATETIME DEFAULT Now()
);
INSERT INTO transactions(transaction_id,Amount)
VALUES(1,5.65),
      (2,7.83),
      (3,8.45);

SELECT * FROM transactions;

PRIMARY KEY
One primary key per table
PRIMARY KEY = unique plus NOT NULL
Avoids duplicate entry

CREATE TABLE transaction(
    transaction_id INT primary key,
    Amount Decimal(4,2)
);

ALTER TABLE transaction
ADD CONSTRAINT PRIMARY KEY(transaction_id);

AUTO INCREMENT 
CREATE TABLE transaction(
    transaction_id INT primary key AUTO INCREMENT,
    Amount Decimal(4,2)
);

INSERT INTO transaction(Amount)
VALUES(4.85),(5.75),(3.89);

ALTER TABLE transactions
AUTO INCREMENT = 1000;


FOREIGN KEY
MYSQL Supports foreign keys, which permit cross referencing related data across 
tables and foreign key constraint, which help keep the realted data consistent
A foreign key Relationship involves a parent table that holds the initial column
values. A foreign key constraint defined on the child table

Example
CREATE TABLE customers(
    customer_id INT PRIMARY KEY AUTO INCREMENT,
    first_name varchar(25),
    Last_name varchar(25)
);

SELECT * FROM customers;

INSERT INTO customers(first_name,Last_name)
VALUES('FRED','FISH'),
      ('LARRY','LOBSTER'),
      ('BUBBLE','BASS');

SELECT * FROM customers;

CREATE TABLE transaction(
    transaction_id INT PRIMARY KEY AUTO INCREMENT,
    Amount DECIMAL(4,2),
    customer_id INT,
    FOREIGN KEY(customer_id) REFERENCES customers(customer_id)
);

select * from transactions;

DELETE * FROM customers
WHERE customer_id = 3;
this query will rerturn Error
to delete the customer_id  where value is 3 first you have delete foreign 
key from transction  


JOINS
INNER JOIN
The common data extracted from both the tables 
in mathematics its like a intersection of two sets 
syntax -
SELECT * FROM 
TABLEA INNER JOIN TABLEB
ON TABLEA.FOREIGNKEY =TABLEB.PRIMARYKEY;
EXAMPLE -
SELECT * FROM transaction INNER JOIN customers
ON transaction.customer_id = customers.customer_id;


LEFT JOINS
All data extracting from left table and linking it with the right table 
in mathematics its like extracting all from setA and Intersection of setA and setB
syntax -
SELECT * FROM TABLEA LEFTJOIN TABLEB
ON TABLEA.FOREIGNKEY = TABLEB.PRIMARYKEY;
EXAMPLE -
SELECT * FROM transaction LEFT JOIN customers
ON transaction.customer_id = customers.customer_id;

RIGHT JOINS
All data extracting from right table and linking it with left table
in mathematics its like extracting all from setB and Intersection of setA and setB
syntax -
SELECT * FROM TABLEA RIGHT JOIN TABLEB
ON TABLEA.FOREIGNKEY = TABLEB.PRIMARYKEY;
EXAMPLE -
SELECT * FROM transaction RIGHT JOIN customers
ON transaction.customer_id = customers.customer_id;


AGGREGATE FUNCTIONS

COUNT()
SELECT COUNT(COLUMN) AS COUNT_NAME
FROM table_name;
This Function returns the count of the values in a column

MAX()
SELECT MAX(COLUMN) AS MAXIMUM_NAME
FROM table_name;
This Function returns the maximum of the value in the column

MIN()
SELECT MIN(COLUMN) AS MINIMUM_VALUES
FROM table_name;
This Function returns the minimum of the value in the column

SUM()
SELECT SUM(COLUMN) AS TOTAL
FROM table_name;
This Function returns the total of the values in the column

AVG()
SELECT AVG(COLUMN) AS AVERAGE
FROM table_name;
This Function returns the average of the values in the column

CONCAT()
SELECT CONCAT(COLUMN1," ",COLUMN2) AS CONCAT_NAME
FROM table_name;
This Function returns the new column by conacting columns

LOGICAL OPERATORS
AND
EXAMPLE -
SELECT * FROM Employees 
WHERE hire_date < '2023-01-05' and job = 'cook';
This table returns the value  if both the condition is satisfied
OR 
Example-
SELECT * FROM Employees
WHERE job = 'cook' or job = 'cashier';
This table returns the value if either of the condition is satisfied
NOT 
Example-
SELECT * FROM Employees
WHERE NOT job = 'Manager'
This table returns all the values except for Manager
BETWEEN 
SELECT * FROM 
WHERE hire_date BETWEEN '2023-01-04' AND '2023-01-07';
used within in a single column
IN 
SELECT * FROM 
WHERE job IN ('cook','cashier','manager');

WILD CHARACTERS 
SELECT * FROM Employees
where hire_date Like '2023';

ORDER BY  
SELECT * FROM table_name
ORDER BY Column_name ASC/DESC ;
The default is considered as asc 

LIMIT 
Limit Clause is used to limit the number of records useful if you are 
working with a lot of data can be used to display a large data on pages(pagination)
SELECT * FROM customers
LIMIT 2;
This query will return only first two rows from the table

UNION
combines the result of two or more select statements
select * from transations UNION select * from customers;
condition - number of both the tables should be same 

UNION ALL 
select * from transations UNION select * from customers;

the main difference between union and union all is 
union does not allow duplicate values
union all allows duplicate values

SELF JOIN
JOIN another copy of the table to itself and used to compare rows of the 
same table helps to display a heirarchy of data

SELECT * FROM 
customers AS A INNER JOIN customers AS B
ON A.customer_id = B.customer_id;

FULL OUTER JOIN
SELECT column_names FROM 
TABLEA FULL OUTER JOIN TABLEB
ON TABLEA.Column_name = TABLEB.Column_name
WHERE condition;


